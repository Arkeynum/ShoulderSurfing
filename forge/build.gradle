plugins {
	id 'java'
	id 'eclipse'
	id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
	id 'com.modrinth.minotaur'
	id 'me.hypherionmc.cursegradle'
}

tasks.withType(Jar).configureEach {
	archivesBaseName = "${mod_name}-Forge"
}

java {
	sourceCompatibility = java_version
	targetCompatibility = java_version
}

eclipse {
	project {
		name = "${mod_name}Forge"
	}
}

sourceSets {
	api {
		compileClasspath += sourceSets.main.compileClasspath
	}
	main {
		java {
			compileClasspath += sourceSets.api.output
			compileClasspath += project(":common").sourceSets.api.output
			runtimeClasspath += sourceSets.api.output
		}
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"
	config "${mod_id}.mixins.json"
	config "${mod_id}.forge.mixins.json"
	config "${mod_id}.compat.oculus.mixins.json"
}

minecraft {
	mappings channel: 'official', version: minecraft_version

	copyIdeResources = true

	runs {
		configureEach {
			workingDirectory project.file('../run')
			ideaModule "${rootProject.name}.${project.name}.main"
			
			mods {
				"${mod_id}" {
					source sourceSets.api
					source sourceSets.main
					source project(":api").sourceSets.main
					source project(":common").sourceSets.main
				}
			}
		}
		
		client {
			taskName "${mod_name}ForgeClient"
		}
		
		server {
			taskName "${mod_name}ForgeServer"
			args '--nogui'
		}
		
		data {
			taskName "${mod_name}ForgeData"
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	compileOnly project(":api")
	compileOnly project(":common")
	
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
	implementation fg.deobf("mcp.mobius.waila:wthit:forge-${wthit_version_forge}")
	implementation fg.deobf("lol.bai:badpackets:forge-${badpackets_version}")
	implementation fg.deobf("curse.maven:jade-324717:${jade_version_forge}")
}

tasks.named('compileJava', JavaCompile).configure {
	source project(":api").sourceSets.main.allSource
	source project(":common").sourceSets.main.allSource
}

tasks.named('processResources', ProcessResources).configure {
	outputs.upToDateWhen {
		false
	}
	
	from project(":common").sourceSets.main.resources
	
	inputs.property "mod_version", mod_version
	inputs.property "mod_name", mod_name
	
	filesMatching('META-INF/mods.toml') {
		expand('version': mod_version)
	}
	
	filesMatching('pack.mcmeta') {
		expand('mod_name': mod_name)
	}
}

tasks.register('apiJar', Jar).configure {
	from project(":api").sourceSets.main.output
	from project(":api").sourceSets.main.allSource
	archiveClassifier = "API"
}

tasks.build.finalizedBy('apiJar')

curseforge {
	apiKey = project.hasProperty("curse_api_key") ? curse_api_key : ''
	project {
		id = curse_project_id
		changelog = file('../changelog.txt').canRead() ? file('../changelog.txt').text : ''
		changelogType = 'text'
		releaseType = 'release'
		addGameVersion 'Forge'
		forge_compatible_minecraft_versions.split(",").each {
			addGameVersion(it)
		}
		mainArtifact(jar) {
			displayName = "${mod_name}-Forge-${minecraft_version}-${mod_version}"
		}
		addArtifact apiJar
	}
	options {
		javaVersionAutoDetect = false
		forgeGradleIntegration = false
	}
}

modrinth {
	token = project.hasProperty("modrinth_api_key") ? modrinth_api_key : ''
	projectId = modrinth_project_id
	versionName = "${mod_name}-Forge-${minecraft_version}-${mod_version}"
	versionNumber = "${minecraft_version}-${mod_version}"
	changelog = file('../changelog.txt').canRead() ? file('../changelog.txt').text : ''
	versionType = 'release'
	uploadFile = jar
	forge_compatible_minecraft_versions.split(",").each {
		gameVersions.add(it)
	}
	loaders = ['forge']
	additionalFiles = [apiJar]
}

tasks.named('jar', Jar).configure {
	finalizedBy 'reobfJar'
}

sourceSets.each {
	def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
	it.output.resourcesDir = dir
	it.java.destinationDirectory = dir
}
