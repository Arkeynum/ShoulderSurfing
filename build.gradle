buildscript {
	repositories {
		maven {
			url = 'https://files.minecraftforge.net/maven'
		}
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	}
}

repositories {
	maven {
		url = "https://maven.minecraftforge.net/"
	}
	maven {
		url = "https://www.cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

sourceSets {
	api
	optifine
	main {
		java {
			compileClasspath += sourceSets.api.output
			runtimeClasspath += sourceSets.api.output
			compileClasspath += sourceSets.optifine.output
			runtimeClasspath += sourceSets.optifine.output
		}
	}
	testplugin {
		java {
			compileClasspath += sourceSets.main.compileClasspath
		}
	}
}

configurations {
	apiImplementation.extendsFrom(implementation)
	apiRuntimeOnly.extendsFrom(runtimeOnly)
}

version = '1.12.2-2.8.2'
group = 'com.teamderpy.shouldersurfing' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ShoulderSurfing'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
	// The mappings can be changed at any time, and must be in the following format.
	// Channel:   Version:
	// snapshot   YYYYMMDD   Snapshot are built nightly.
	// stable     #          Stables are built at the discretion of the MCP team.
	// official   MCVersion  Official field/method names from Mojang mapping files
	//
	// You must be aware of the Mojang license when using the 'official' mappings.
	// See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
	//
	// Use non-default mappings at your own risk. they may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'stable', version: '39-1.12'
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	runs {
		client {
			workingDirectory project.file('run')
			
			// Recommended logging data for a userdev environment
			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			// property 'forge.logging.console.level', 'debug'
			
			mods {
				shouldersurfing {
					source sourceSets.api
					source sourceSets.main
					source sourceSets.optifine
				}
			}
		}
		
		server {
			workingDirectory project.file('run')
			
			// Recommended logging data for a userdev environment
			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			// property 'forge.logging.console.level', 'debug'
			
			mods {
				shouldersurfing {
					source sourceSets.api
					source sourceSets.main
					source sourceSets.optifine
				}
			}
		}
		
		data {
			workingDirectory project.file('run')
			
			// Recommended logging data for a userdev environment
			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			// property 'forge.logging.console.level', 'debug'
			
			mods {
				shouldersurfing {
					source sourceSets.api
					source sourceSets.main
					source sourceSets.optifine
				}
			}
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	// Put repositories for dependencies here
	// ForgeGradle automatically adds the Forge maven and Maven Central for you
	
	// If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
	// flatDir {
	//     dir 'libs'
	// }
}

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
	
	// You may put jars on which you depend on in ./libs or you may define them like so..
	// compile "some.group:artifact:version:classifier"
	// compile "some.group:artifact:version"
	
	// Real examples
	// compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	// compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
	
	// The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
	// provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
	// These dependencies get remapped to your current MCP mappings
	// deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
	// For more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
	
	implementation('org.ow2.asm:asm:5.2') {
		force = true
	}
	
	implementation('org.ow2.asm:asm-analysis:5.2') {
		force = true
	}
	
	implementation('org.ow2.asm:asm-tree:5.2') {
		force = true
	}
	
	implementation('org.ow2.asm:asm-util:5.2') {
		force = true
	}
	
	implementation("org.spongepowered:mixin:0.8.5") {
		exclude module: "commons-io"
		exclude module: "guava"
		exclude module: "gson"
		exclude module: "launchwrapper"
	}
	
	compileOnly(fg.deobf("curse.maven:valkyrien-skies-258371:3286262"))
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
			"Specification-Title": "shouldersurfing",
			"Specification-Vendor": "Exopandora",
			"Specification-Version": "1",
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"Exopandora",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"FMLAT": "accesstransformer.cfg",
			"FMLCorePlugin": "com.teamderpy.shouldersurfing.asm.ShoulderPlugin",
			"FMLCorePluginContainsFMLMod": "false"
		])
	}
	
	from sourceSets.api.output
}

task apiJar(type: Jar) {  
	from sourceSets.api.output
	from sourceSets.api.allSource
	classifier = "API"
}

tasks.build.finalizedBy("apiJar")
