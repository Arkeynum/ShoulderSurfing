buildscript {
	repositories {
		maven {
			url = 'https://files.minecraftforge.net/maven'
		}
		maven {
			url = 'https://repo.spongepowered.org/maven'
		}
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
	}
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'

tasks.eclipse.dependsOn('createMcpToSrg')

sourceSets {
	api
	main {
		java {
			compileClasspath += api.output
			runtimeClasspath += api.output
		}
	}
}

configurations {
	apiCompile.extendsFrom(compile)
}

mixin {
	add sourceSets.main, 'main.refmap.json'
}

version = '1.16.5-2.0.3'
group = 'com.teamderpy.shouldersurfing' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ShoulderSurfing'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

minecraft {
	// The mappings can be changed at any time, and must be in the following format.
	// Channel:   Version:
	// snapshot   YYYYMMDD   Snapshot are built nightly.
	// stable     #          Stables are built at the discretion of the MCP team.
	// official   MCVersion  Official field/method names from Mojang mapping files
	//
	// You must be aware of the Mojang license when using the 'official' mappings.
	// See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
	//
	// Use non-default mappings at your own risk. they may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: 'official', version: '1.16.5'
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
	runs {
		client {
			workingDirectory project.file('run')
			
			// Recommended logging data for a userdev environment
			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			// property 'forge.logging.console.level', 'debug'
			
			arg "-mixin.config=shouldersurfing.mixins.json"
			
			mods {
				shouldersurfing {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
		
		server {
			workingDirectory project.file('run')
			
			// Recommended logging data for a userdev environment
			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			// property 'forge.logging.console.level', 'debug'
			
			arg "-mixin.config=shouldersurfing.mixins.json"
			
			mods {
				shouldersurfing {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
		
		data {
			workingDirectory project.file('run')
			
			// Recommended logging data for a userdev environment
			// property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			
			// Recommended logging level for the console
			// property 'forge.logging.console.level', 'debug'
			
			args '--mod', 'shouldersurfing', '--all', '--output', file('src/generated/resources/')
			
			mods {
				shouldersurfing {
					source sourceSets.main
					source sourceSets.api
				}
			}
		}
	}
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
	// Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
	// that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
	// The userdev artifact is a special name and will get all sorts of transformations applied to it.
	minecraft 'net.minecraftforge:forge:1.16.5-36.1.23'
	
	// You may put jars on which you depend on in ./libs or you may define them like so..
	// compile "some.group:artifact:version:classifier"
	// compile "some.group:artifact:version"
	
	// Real examples
	// compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
	// compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
	
	// The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
	// provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
	// These dependencies get remapped to your current MCP mappings
	// deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
	// For more info...
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html
	
	annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
			"Specification-Title": "shouldersurfing",
			"Specification-Vendor": "Exopandora",
			"Specification-Version": "1",
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"Exopandora",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "shouldersurfing.mixins.json"
		])
	}
	
	rename 'main.refmap.json', 'shouldersurfing.refmap.json'
}
